#---------------------------------------------------------------------
# table_maker.pod

# Note: we added =begin text and =begin html blocks for the pod2html
# script to see.  Unfortunately, you must (apparently) call perldoc
# with the -t flag in order to see the =begin text blocks.
# (I would have expected that not to be necessary.)

=head1 NAME

B<Table Maker>, a collection of javascript functions that modify the
HTML DOM to make <div>'s, <ul>'s, <ol>'s, and <dl>'s into tables for
special formatting.

=head1 SYNOPSIS

HTML like the following:

 <html>
 <head>
 <script type="text/javascript" src="/javascript/table_maker/table_numbers.js"></script>
 <script type="text/javascript" src="/javascript/table_maker/table_maker.js"></script>
 </head>
 <body onload="table_maker(hflmrmff)"> <!-- HeaderFull LeftMiddle RightMiddle FooterFull -->
 <div id="page">
     <div id="header"       > Header       </div>
     <div id="left_margin"  > Left Margin  </div>
     <div id="body"         > Body         </div>
     <div id="right_margin" > Right Margin </div>
     <div id="footer"       > Footer       </div>
 </div>
 </body>
 </html>

... should format into a table like the following:

=begin text

 +---------------------------------------------+
 |                                             |
 |                   Header                    |
 |                                             |
 +--------+---------------------------+--------+
 |        |                           |        |
 |        |                           |        |
 | Left   |           Body            | Right  |
 | Margin |                           | Margin |
 |        |                           |        |
 +--------+---------------------------+--------+
 |                                             |
 |                   Footer                    |
 |                                             |
 +---------------------------------------------+

=end text

=begin html

<style type="text/css">
table { margin: 2em; width: 50%; height: 200px; border: 1px solid grey; background: #eee }
tr    { vertical-align: middle; }
td    { border: 1px solid grey; text-align: center; }
#td_left_margin,#td_right_margin { width: 2%; }
</style>

<TABLE id="page">
<TBODY>
<TR valign="top">
    <TD id="td_header" colspan="3">
        <DIV id="header"> Header       </DIV>
    </TD>
</TR>
<TR valign="top">
    <TD id="td_left_margin">
        <DIV id="left_margin"> Left Margin  </DIV>
    </TD>
    <TD id="td_body">
        <DIV id="body"> Body         </DIV>
    </TD>
    <TD id="td_right_margin">
        <DIV id="right_margin"> Right Margin </DIV>
    </TD>
</TR>
<TR valign="top">
    <TD id="td_footer" colspan="3">
        <DIV id="footer"> Footer       </DIV>
    </TD>
</TR>
</TBODY>
</TABLE>

=end html

=head1 DESCRIPTION

The Table Maker collection of functions includes the following:

 table_maker()   dispatch table for the following functions:
 div_table()     make a set of <div>'s into a table
 ul_table()      make a <ul> tag (and its <li>'s) into a table
 ol_table()      make a <ol> tag (and its <li>'s) into a table
 dl_table()      make a <dl> tag (and its <dt>'s and <dd>'s) into a table

=head1 FUNCTIONS

=head2 table_maker(aSpecs)

This function is a dispatch table for the other functions,
C<div_table()>, C<ul_table()>, C<ol_table()>, and C<dl_table()>.  You
can call C<table_maker()> with an array of table specs objects to
create multiple tables with one function call.

For example:

 table_maker( [
    { "divid" : "tmdiv",
      "rows"  : [
          [["tdtmc1",["tmc1"]],["tdtmc2",["tmc2"]],["tdtmc3",["tmc3"]]]
      ]
    },
    { "ulid" : "tmul" },
    { "olid" : "tmol" },
    { "dlid" : "tmdl" }
 ] );

The above example will call C<div_table()>, C<ul_table()>,
C<ol_table()>, and C<dl_table()>, passing each object it finds in the
array.

The function knows which of these other functions to call based on the
existence in each object of either C<divid> (for C<div_table()>),
C<ulid> (for C<ul_table()>), C<olid> (for C<ol_table()>), or C<dlid>
(for C<dl_table()>).

=head2 div_table(oSpecs)

This function turns a <div> tag into a <table> tag.  Specify the id of
the <div> tag using the C<divid> attribute.  Use the C<rows> attribute
to specify which child <div>'s to place into table cells and how to
layout those table cells.  In addition, give id values for each table
cell and any additional table cell attributes you need.

Note that only the <div> tag whose id matches the C<divid> value is
changed from a <div> tag to something else (a <table> tag), and as a
result, the original <div> tag will not exist in the DOM.  All of the
other <div> tags identified in the table specs are I<moved> into table
cells.  So those <div> tags do still exist in the DOM.  (Note also that
any children of the C<divid> <div> tag that are not I<moved> into the
table will be lost when the <div> tag is removed in favor of the new
<table> tag.)

Contrast this with how C<ul_table()>, C<ol_table()>, and C<dl_table()>
work.  The C<ul_table()> function turns the <ul> tag into a <table> tag
and the <li> tags into <td> tags.  As a result, neither the <ul> or any
of its child <li> tags will exist in the DOM.  The same is true for the
<ol> and <li> tags after running C<ol_table()>, and for the <dl>, <dt>,
and <dd> tags after running C<dl_table()>.  In the DOM all of these
tags are changed to <table> and <td> tags (with <tbody> and <tr> tags
inserted as needed).

All of this is pertinent when you author the CSS properties for the
page.

The C<div_table()> function expects a table specs object with these
required attributes:

=over 4

=item divid

The id of the <div> tag to make into a table.

=item rows

An n-element array of specs for the table rows.  Each row element is
itself an array of cell specs.  Each element in the cell specs array is
an array with the following elements:

 [0] id value to assign to the cell
 [1] ids of <div>'s to move into the cell (an n-element array)
 [2] pairs of attribute names and values (an even numered n-element array)

=back

For example, following are the specs for B<table 1> (formatted like
this diagram):

 +---------------------------------------------+
 |                                             |
 |                   header                    |
 |                                             |
 +---------------------------------------------+
 |        |                           |        |
 | left   |           body            | right  |
 | margin |                           | margin |
 |        +---------------------------+        |
 |        |                           |        |
 |        |          footer           |        |
 |        |                           |        |
 +---------------------------------------------+
 
 var t1 = {
     "divid" : "page",
     "rows"  : [
         [
             [ "td_header", [ "header" ], [ "colSpan", 3 ] ]
         ],
         [
             [ "td_left_margin",  [ "left_margin"  ], [ "rowSpan", 2 ] ],
             [ "td_body",         [ "body"         ]                   ],
             [ "td_right_margin", [ "right_margin" ], [ "rowSpan", 2 ] ]
         ],
         [ [ "td_footer", [ "footer" ] ] ]
     ]
 };

=head2 ul_table(oSpecs)

This function turns a <ul> tag (or an <ol> tag) into a table.  Each
<li> child tag becomes a table cell.  The attributes of the <ul> tag
become those of the <table> tag.  The attributes of each <li> tag
become those of each <td> tag.

Depending on the value of the C<grid> attribute, there may be one or
more cells per row.  If C<grid> specifies multiple columns, the
C<orien> (orientation) attribute may be C<"v"> to orient the cells
vertically.  That is, instead of the following horizontal layout (the
default):

 1 2 3 4
 5 6 7 8

if C<orien> is C<"v"> (rather than C<"h">), the layout would be:

 1 3 5 7
 2 4 6 8

The C<bullet> attribute will cause a I<bullet cell> to be added.  The
C<usebull> attribute will cause a I<usebull cell> to be added.  The
C<prefix> attribute gives an id prefix which will add id values to
cells whose corresponding <li> tag did not already have an id value.

For example:

 <ul id="ul11" class="ul-table" >
 <li class="ul-li"><b>*</b> LI 1</li>
 <li class="ul-li"><b>*</b> LI 2</li>
 <li class="ul-li"><b>*</b> LI 3</li>
 <li class="ul-li"><b>*</b> LI 4</li>
 <li class="ul-li"><b>*</b> LI 5</li>
 </ul>

 <script type="text/javascript">
    ul_table( {
        "ulid"    : "ul11" ,  // id's the <ul> tag
        "grid"    : 2      ,  // two columns
        "orien"   : "h"    ,  // horizontal orientation
        "bullet"  : "o"    ,  // simple one-character bullet
        "usebull" : 0         // use the "<b>*</b>" element (child[0])
    } );
 </script>

The above should result in a layout like the following:

=begin text

 +-------------------------------------------+
 | +---+ +---+ +------+ +---+ +---+ +------+ |
 | | * | | o | | LI 1 | | * | | o | | LI 2 | |
 | +---+ +---+ +------+ +---+ +---+ +------+ |
 | +---+ +---+ +------+ +---+ +---+ +------+ |
 | | * | | o | | LI 3 | | * | | o | | LI 4 | |
 | +---+ +---+ +------+ +---+ +---+ +------+ |
 | +---+ +---+ +------+                      |
 | | * | | o | | LI 5 |                      |
 | +---+ +---+ +------+                      |
 +-------------------------------------------+

=end text

=begin html
<style type="text/css">
table { margin: 2em; width: 50%; height: 200px; border: 1px solid grey; background: #eee }
tr    { vertical-align: middle; }
td    { border: 1px solid grey; text-align: center; }
</style>

<TABLE class="ul-table" id="ul11">
<TBODY>
<TR valign="top">
    <TD class="ul-li-usebull"><B>*</B></TD>
    <TD class="ul-li-bullet">o</TD>
    <TD class="ul-li"> LI 1</TD>
    <TD class="ul-li-usebull"><B>*</B></TD>
    <TD class="ul-li-bullet">o</TD>
    <TD class="ul-li"> LI 2</TD>
</TR>
<TR valign="top">
    <TD class="ul-li-usebull"><B>*</B></TD>
    <TD class="ul-li-bullet">o</TD>
    <TD class="ul-li"> LI 3</TD>
    <TD class="ul-li-usebull"><B>*</B></TD>
    <TD class="ul-li-bullet">o</TD>
    <TD class="ul-li"> LI 4</TD>
</TR>
<TR valign="top">
    <TD class="ul-li-usebull"><B>*</B></TD>
    <TD class="ul-li-bullet">o</TD>
    <TD class="ul-li"> LI 5</TD>
</TR>
</TBODY>
</TABLE>


=end html

Note that the I<usebull> cells come first, followed by the I<bullet>
cells and then a cell with the rest of the original <li> contents.

A note about the class attribute: When an <li> tag has a class
assigned, that value will be used to assign a class to each of the
usebull and bullet cells, suffixed with C<"-usebull"> and C<"-bullet">,
respectively.  So in the above example, the usebull cells will all have
C<class="ul-li-usebull"> and the bullet cells will all have
C<class="ul-li-bullet">.

=over 4

=item ulid

The id value of the <ul> tag (or <ol> tag) to make into a table.  If
the id is for an <ol> tag, the resulting table will not have number
cells.  Also see C<ol_table> below.

=item grid

The number of columns to put in the new table (default is one column).
The C<grid> value should be an integer greater than 1.

=item orien

The orientation of the grid layout (default is C<"h"> for horizontal).
The C<orien> value should be C<"h"> (the default) or C<"v"> for
vertical.

=item bullet

Character or characters to use as a bullet for each item.  These
characters will be placed in a separate cell, a I<bullet cell>.  The
C<bullet> value can be any displayable characters or html tags,
including entities like C<"&bull;">.

=item usebull

Index of the <li> tag's child element to use as a bullet.  This element
will be moved from the <li> tag cell to it's own separate cell, a
I<usebull cell>.  The C<usebull> value should be an integer equal to or
greater than 0.

=item prefix

A prefix to use to assign id values to cells.  The C<prefix> value will
be ignored if the <li> has an id already.  If used, a sequence number
will be added to C<prefix> to form the id of the cell.  In addition,
I<bullet cells> will be given this id suffixed with C<"-bullet">, and
I<usebull cells> will be given this id suffixed with C<"-usebull">.  If
the <li> tag has an id already, this id--suffixed with C<"-bullet"> or
C<"-usebull">--will be used for bullet and usebull cells.

=back

=head2 ol_table(oSpecs)

This function turns a <ol> tag (or an <ul> tag) into a table.  Each
<li> child tag becomes a table cell.  The attributes of the <ol> tag
become those of the <table> tag.  The attributes of each <li> tag
become those of each <td> tag.

Depending on the value of the C<grid> attribute, there may be one or
more cells per row.  If C<grid> specifies multiple columns, the
C<orien> (orientation) attribute may be C<"v"> to orient the cells
vertically.  That is, instead of the following horizontal layout (the
default):

 1 2 3 4
 5 6 7 8

if C<orien> is C<"v"> (rather than C<"h">), the layout would be:

 1 3 5 7
 2 4 6 8

The C<bullet> attribute will cause a I<bullet cell> to be added.  The
C<usebull> attribute will cause a I<usebull cell> to be added.  The
C<prefix> attribute gives an id prefix which will add id values to
cells whose corresponding <li> tag did not already have an id value.

The C<number> attribute will cause a I<number cell> to be added.
Numbering is on by default.

For example:

 <ol id="ol11" class="ol-table" >
 <li class="ol-li"><b>*</b> LI 1</li>
 <li class="ol-li"><b>*</b> LI 2</li>
 <li class="ol-li"><b>*</b> LI 3</li>
 <li class="ol-li"><b>*</b> LI 4</li>
 <li class="ol-li"><b>*</b> LI 5</li>
 </ol>

 <script type="text/javascript">
    ol_table( {
        "olid"    : "ol11"   ,  // id's the <ol> tag
        "grid"    : 2        ,  // two columns
        "orien"   : "v"      ,  // vertical orientation
        "bullet"  : "o"      ,  // simple one-character bullet
        "number"  : "arabic" ,  // (this default may be left off)
        "usebull" : 0           // use the "<b>*</b>" element (child[0])
    } );
 </script>

The above should result in a layout like the following:

=begin text

 +-------------------------------------------------------+
 | +---+ +---+ +---+ +------+ +---+ +---+ +---+ +------+ |
 | | * | | o | | 1.| | LI 1 | | * | | o | | 4.| | LI 4 | |
 | +---+ +---+ +---+ +------+ +---+ +---+ +---+ +------+ |
 | +---+ +---+ +---+ +------+ +---+ +---+ +---+ +------+ |
 | | * | | o | | 2.| | LI 2 | | * | | o | | 5.| | LI 5 | |
 | +---+ +---+ +---+ +------+ +---+ +---+ +---+ +------+ |
 | +---+ +---+ +---+ +------+                            |
 | | * | | o | | 3.| | LI 3 |                            |
 | +---+ +---+ +---+ +------+                            |
 +-------------------------------------------------------+

=end text

=begin html

<style type="text/css">
table { margin: 2em; width: 50%; height: 200px; border: 1px solid grey; background: #eee }
tr    { vertical-align: middle; }
td    { border: 1px solid grey; text-align: center; }
</style>

<TABLE class="ol-table" id="ol11">
<TBODY>
<TR valign="top">
    <TD class="ol-li-usebull"><B>*</B></TD>
    <TD class="ol-li-bullet">o</TD>
    <TD class="ol-li-number">1.</TD>
    <TD class="ol-li"> LI 1</TD>
    <TD class="ol-li-usebull"><B>*</B></TD>
    <TD class="ol-li-bullet">o</TD>
    <TD class="ol-li-number">4.</TD>
    <TD class="ol-li"> LI 4</TD>
</TR>
    <TR valign="top">
    <TD class="ol-li-usebull"><B>*</B></TD>
    <TD class="ol-li-bullet">o</TD>
    <TD class="ol-li-number">2.</TD>
    <TD class="ol-li"> LI 2</TD>
    <TD class="ol-li-usebull"><B>*</B></TD>
    <TD class="ol-li-bullet">o</TD>
    <TD class="ol-li-number">5.</TD>
    <TD class="ol-li"> LI 5</TD>
</TR>
    <TR valign="top">
    <TD class="ol-li-usebull"><B>*</B></TD>
    <TD class="ol-li-bullet">o</TD>
    <TD class="ol-li-number">3.</TD>
    <TD class="ol-li"> LI 3</TD>
</TR>
</TBODY>
</TABLE>

=end html

Note that the I<usebull> cells come first, followed by the I<bullet>
cells, followed in turn by the I<number> cells, and then a cell with
the rest of the original <li> contents.

A note about the class attribute: When an <li> tag has a class
assigned, that value will be used to assign a class to each of the
usebull, bullet, and number cells, suffixed with C<"-usebull">,
C<"-bullet">, and C<"-number"> respectively.  So in the above example,
the usebull cells will all have C<class="ol-li-usebull">, the bullet
cells will all have C<class="ol-li-bullet">, and the number cells will
all have C<class="ol-li-number">.

=over 4

=item olid

The id value of the <ol> tag (or <ul> tag) to make into a table.  If
the id is for an <ul> tag, the resulting table will have number cells
by default.  Also see C<ul_table()> above.

=item grid

The number of columns to put in the new table (default is one column).
The C<grid> value should be an integer greater than 1.

=item orien

The orientation of the grid layout (default is C<"h"> for horizontal).
The C<orien> value should be C<"h"> (the default) or C<"v"> for
vertical.

=item bullet

Character or characters to use as a bullet for each item.  These
characters will be placed in a separate cell, a I<bullet cell>.  The
C<bullet> value can be any displayable characters or html tags,
including entities like C<"&bull;">.

=item usebull

Index of the <li> tag's child element to use as a bullet.  This element
will be moved from the <li> tag cell to it's own separate cell, a
I<usebull cell>.  The C<usebull> value should be an integer equal to or
greater than 0.

=item prefix

A prefix to use to assign id values to cells.  The C<prefix> value will
be ignored if the <li> has an id already.  If used, a sequence number
will be added to C<prefix> to form the id of the cell.  In addition,
I<bullet cells> will be given this id suffixed with C<"-bullet">,
I<usebull cells> will be given this id suffixed with C<"-usebull">, and
I<number cells> will be given this id suffixed with C<"-number">.  If
the <li> tag has an id already, this id--suffixed with C<"-bullet">,
C<"-usebull">, or C<"-number">--will be used for bullet and usebull
cells.

=item number

Type of numbering to use (default is C<'arabic'>).  The C<number> value
should be one of the following C<'arabic'>, C<'upper-roman'>,
C<'upper-alpha'>, C<'lower-roman'>, C<'lower-alpha'>, or C<'none'> (to
disable numbering).

=back

=head2 dl_table(oSpecs)

This function turns a <dl> tag into a table.  Each <dt> and <dd> child
tag becomes a table cell.  The attributes of the <dl> tag become those
of the <table> tag.  The attributes of each <dt> and <dd> tag become
those of each <td> tag.

The C<bullet> attribute will cause a I<bullet cell> to be added.  The
C<usebull> attribute will cause a I<usebull cell> to be added.  The
C<prefix> attribute gives an id prefix which will add id values to
cells whose corresponding <li> tag did not already have an id value.

The C<number> attribute will cause a I<number cell> to be added.
Numbering is off by default.

For example:

 <dl id="dl11" class="dl-table" >
 <dt class="dl-dt"><b>*</b> DT 1</dt>
     <dd class="dl-dd">DD 1.1</dd>
 <dt class="dl-dt"><b>*</b> DT 2</dt>
     <dd class="dl-dd">DD 2.1</dd>
     <dd class="dl-dd">DD 2.2</dd>
 <dt class="dl-dt"><b>*</b> DT 3</dt>
     <dd class="dl-dd">DD 3.1</dd>
 <dt class="dl-dt"><b>*</b> DT 4</dt>
 <dt class="dl-dt"><b>*</b> DT 5</dt>
     <dd class="dl-dd">DD 5.1</dd>
 </dl>

 <script type="text/javascript">
     dl_table( {
        "dlid"    : "dl11"   ,  // id of <dl> tag
        "bullet"  : "o"      ,  // simple character bullet
        "usebull" : 0        ,  // use <b>*</b>
        "number"  : "arabic"    // needed for numbering (off by default)
     } );
 </script>

The above should result in a layout like the following:

=begin text

 +---------------------------------------+
 | +---+ +---+ +---+ +------+ +--------+ |
 | | * | | o | | 1.| | DT 1 | | DD 1.1 | |
 | +---+ +---+ +---+ +------+ +--------+ |
 | +---+ +---+ +---+ +------+ +--------+ |
 | | * | | o | | 2.| | DT 2 | | DD 2.1 | |
 | |   | |   | |   | |      | +--------+ |
 | |   | |   | |   | |      | +--------+ |
 | |   | |   | |   | |      | | DD 2.2 | |
 | +---+ +---+ +---+ +------+ +--------+ |
 | +---+ +---+ +---+ +------+ +--------+ |
 | | * | | o | | 3.| | DT 3 | | DD 3.1 | |
 | +---+ +---+ +---+ +------+ +--------+ |
 | +---+ +---+ +---+ +------+            |
 | | * | | o | | 4.| | DT 4 |            |
 | +---+ +---+ +---+ +------+            |
 | +---+ +---+ +---+ +------+ +--------+ |
 | | * | | o | | 5.| | DT 5 | | DD 5.1 | |
 | +---+ +---+ +---+ +------+ +--------+ |
 +---------------------------------------+

=end text

=begin html

<style type="text/css">
table { margin: 2em; width: 50%; height: 200px; border: 1px solid grey; background: #eee }
tr    { vertical-align: middle; }
td    { border: 1px solid grey; text-align: center; }
#td_left_margin,#td_right_margin { width: 2%; }
</style>

<TABLE class="dl-table" id="dl11">
<TBODY>
<TR valign="top">
    <TD class="dl-dt-usebull"><B>*</B></TD>
    <TD class="dl-dt-bullet">o</TD>
    <TD class="dl-dt-number">1.</TD>
    <TD class="dl-dt"> DT 1</TD>
    <TD class="dl-dd">DD 1.1</TD>
</TR>
<TR valign="top">
    <TD rowspan="2" class="dl-dt-usebull"><B>*</B></TD>
    <TD rowspan="2" class="dl-dt-bullet">o</TD>
    <TD rowspan="2" class="dl-dt-number">2.</TD>
    <TD rowspan="2" class="dl-dt"> DT 2</TD>
    <TD class="dl-dd">DD 2.1</TD>
</TR>
<TR valign="top">
    <TD class="dl-dd">DD 2.2</TD>
</TR>
<TR valign="top">
    <TD class="dl-dt-usebull"><B>*</B></TD>
    <TD class="dl-dt-bullet">o</TD>
    <TD class="dl-dt-number">3.</TD>
    <TD class="dl-dt"> DT 3</TD>
    <TD class="dl-dd">DD 3.1</TD>
</TR>
<TR valign="top">
    <TD class="dl-dt-usebull"><B>*</B></TD>
    <TD class="dl-dt-bullet">o</TD>
    <TD class="dl-dt-number">4.</TD>
    <TD class="dl-dt"> DT 4</TD>
</TR>
<TR valign="top">
    <TD class="dl-dt-usebull"><B>*</B></TD>
    <TD class="dl-dt-bullet">o</TD>
    <TD class="dl-dt-number">5.</TD>
    <TD class="dl-dt"> DT 5</TD>
    <TD class="dl-dd">DD 5.1</TD>
</TR>
</TBODY>
</TABLE>

=end html

Note that the I<usebull> cells come first, followed by the I<bullet>
cells, followed in turn by the I<number> cells, and then a cell with
the rest of the original <dt> contents.  Finally, if there are any <dd>
tags, they are associated with the immediately preceding <dt> tag.

A note about the class attribute: When an <dt> tag has a class
assigned, that value will be used to assign a class to each of the
usebull, bullet, and number cells, suffixed with C<"-usebull">,
C<"-bullet">, and C<"-number"> respectively.  So in the above example,
the usebull cells will all have C<class="dl-dt-usebull">, the bullet
cells will all have C<class="dl-dt-bullet">, and the number cells will
all have C<class="dl-dt-number">.

Note finally that bullets and numbers are always associated with <dt>
tags, never with <dd> tags.  If a <dd> tag does not have a <dt> tag
above it, it is an error, and C<dl_table()> will fail.

=over 4

=item dlid

The id value of the <dl> tag to make into a table.

=item bullet

Character or characters to use as a bullet for each item.  These
characters will be placed in a separate cell, a I<bullet cell>.  The
C<bullet> value can be any displayable characters or html tags,
including entities like C<"&bull;">.

=item usebull

Index of the <dt> (not <dd>) tag's child element to use as a bullet.
This element will be moved from the <dt> tag cell to it's own separate
cell, a I<usebull cell>.  The C<usebull> value should be an integer
equal to or greater than 0.

=item prefix

A prefix to use to assign id values to cells.  The C<prefix> value will
be ignored if the <dt> or <dd> has an id already.  If used, a sequence
number will be added to C<prefix> to form the id of the cell.  In
addition, I<bullet cells> will be given this id suffixed with
C<"-bullet">, I<usebull cells> will be given this id suffixed with
C<"-usebull">, and I<number cells> will be given this id suffixed with
C<"-number">.  If the <li> tag has an id already, this id--suffixed
with C<"-bullet">, C<"-usebull">, or C<"-number">--will be used for
bullet and usebull cells.

=item number

Type of numbering to use (default is no numbering).  The C<number>
value should be one of the following C<'arabic'>, C<'upper-roman'>,
C<'upper-alpha'>, C<'lower-roman'>, C<'lower-alpha'>, or C<'none'> (for
no numbering, the default).

=back

=head1 NUMBERING

As described above, C<ol_table()> and C<dl_table()> provide a numbering
option.  In C<ol_table()>, this option is on by default, using the
C<'arabic'> type of numbering.  In C<dl_table()>, numbering is off by
default.

The types of numbering are as follows (note that all numbers are
suffixed with a period C<".">):

=over 4

=item arabic

Numbering uses arabic digits:

 1. 2. 3. 4. 5. ...

=item upper-roman

Numbering uses upper-case Roman numerals:

 I. II. III. IV. V. ...

=item lower-roman

Numbering uses lower-case Roman numerals:

 i. ii. iii. iv. v. ...

=item upper-alpha

Numbering uses upper-case alphabetic characters (A-Z):

 A. B. C. D. E. ...

For numbers above 26, the characters are doubled:

 AA. BB. CC. DD. EE. ...
 
For numbers above 52, the characters are tripled:

 AAA. BBB. CCC. DDD. EEE.> ...
 
And so forth.

=item lower-alpha

Numbering uses upper-case alphabetic characters (a-z):

 a. b. c. d. e. ...

For numbers above 26, the characters are doubled:

 aa. bb. cc. dd. ee. ...

For numbers above 52, the characters are tripled:

 aaa. bbb. ccc. ddd. eee. ...

And so forth.

=back

=head2 The C<value> attribute

Normally, <li> tags in <ol> lists may set a C<value> attribute
that is the number to use to number that item.  Subsequent items
that don't have C<value> attributes will be numbered from there, e.g.,

 <ol>
 <li           >Item</li> <!-- 1 -->
 <li           >Item</li> <!-- 2 -->
 <li value="10">Item</li> <!-- 10 -->
 <li           >Item</li> <!-- 11 -->
 <li           >Item</li> <!-- 12 -->
 </ol>

=begin text

  1. Item
  2. Item
 10. Item
 11. Item
 12. Item

=end text

=begin html

<style type="text/css">
ol { width: 9%; padding: 1em 1em 1em 4em; margin: 2em; border: 1px solid grey; background: #eee }
</style>

<ol>
<li           >Item</li> <!-- 1 -->
<li           >Item</li> <!-- 2 -->
<li value="10">Item</li> <!-- 10 -->
<li           >Item</li> <!-- 11 -->
<li           >Item</li> <!-- 12 -->
</ol>

=end html

The B<Table Maker> functions that offer a numbering option
(C<ol_table()> and C<dl_table()>) will respond to a C<value> attribute
in an <li> or <dt> tag, and alter the numbering accordingly.  (This is
true also for <ul> tags that are converted using C<ol_table()>.)

For example:

 <ol id="ol12">
 <li           >LI 1</li>
 <li           >LI 2</li>
 <li value="10">LI 3</li>
 <li           >LI 4</li>
 <li           >LI 5</li>
 </ol>

 <script type="text/javascript">
    ol_table( {
        "olid"    : "ol12" ,
        "grid"    : 2      ,
        "bullet"  : "*"
    } );
 </script>

The above should result in a layout like the following:

=begin text

 +-----------------------------------------------+
 | +---+ +-----+ +------+ +---+ +-----+ +------+ |
 | | * | | 1.  | | LI 1 | | * | | 2.  | | LI 2 | |
 | +---+ +-----+ +------+ +---+ +-----+ +------+ |
 | +---+ +-----+ +------+ +---+ +-----+ +------+ |
 | | * | | 10. | | LI 3 | | * | | 11. | | LI 4 | |
 | +---+ +-----+ +------+ +---+ +-----+ +------+ |
 | +---+ +-----+ +------+                        |
 | | * | | 12. | | LI 5 |                        |
 | +---+ +-----+ +------+                        |
 +-----------------------------------------------+

=end text

=begin html

<style type="text/css">
table { margin: 2em; width: 50%; height: 200px; border: 1px solid grey; background: #eee }
tr    { vertical-align: middle; }
td    { border: 1px solid grey; text-align: center; }
</style>

<TABLE id="ol12">
<TBODY>
<TR valign="top">
    <TD>*</TD>
    <TD>1.</TD>
    <TD>LI 1</TD>
    <TD>*</TD>
    <TD>2.</TD>
    <TD>LI 2</TD>
</TR>
<TR valign="top">
    <TD>*</TD>
    <TD>10.</TD>
    <TD value="10">LI 3</TD>
    <TD>*</TD>
    <TD>11.</TD>
    <TD>LI 4</TD>
</TR>
<TR valign="top">
    <TD>*</TD>
    <TD>12.</TD>
    <TD>LI 5</TD>
</TR>
</TBODY>
</TABLE>


=end html

=cut

