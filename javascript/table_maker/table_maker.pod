# table_maker.pod

=head1 NAME

Table Maker, a collection of javascript functions that modify
html dom to make div's, ul's, ol's, and dl's into tables for
special formatting.

=head1 SYNOPSIS

HTML like the following:

 <html>
 <head>
 <script type="text/javascript" src="/javascript/table_maker/table_numbers.js"></script>
 <script type="text/javascript" src="/javascript/table_maker/table_maker.js"></script>
 </head>
 <body onload="table_maker(hflmrmff)"> <!-- HeaderFull LeftMiddle RightMiddle FooterFull -->
 <div id="page">
     <div id="header"       > Header       </div>
     <div id="left_margin"  > Left Margin  </div>
     <div id="body"         > Body         </div>
     <div id="right_margin" > Right Margin </div>
     <div id="footer"       > Footer       </div>
 </div>
 </body>
 </html>

... should format into a table like the following:

 +---------------------------------------------+
 |                                             |
 |                   Header                    |
 |                                             |
 +--------+---------------------------+--------+
 |        |                           |        |
 |        |                           |        |
 | Left   |           Body            | Right  |
 | Margin |                           | Margin |
 |        |                           |        |
 +--------+---------------------------+--------+
 |                                             |
 |                   Footer                    |
 |                                             |
 +---------------------------------------------+

=head1 DESCRIPTION

The Table Maker collection of functions includes the following:

 div_table()     make a set of <div>'s into a table
 ul_table()      make a <ul> tag (and its <li>'s) into a table
 ol_table()      make a <ol> tag (and its <li>'s) into a table
 dl_table()      make a <dl> tag (and its <dt>'s and <dd>'s) into a table
 table_maker()   dispatch table for the above functions

=head1 FUNCTIONS

=head2 div_table( specs )

'specs' is a JSON object:

 {divid}: id of the div to replace with the new table (table gets this id)
 {rows}:  the rows (an n-element array):
     - the cells in each row (an n-element array):
       - the 'cellspecs' (a three-element array):
         [0] id to assign to the cell
         [1] div ids to move into the cell (an n-element array)
         [2] pairs of attribute names and values (an even numered n-element array)

 E.g., specs for "table 1":
 
 +---------------------------------------------+
 |                                             |
 |                   header                    |
 |                                             |
 +---------------------------------------------+
 |        |                           |        |
 | left   |           body            | right  |
 | margin |                           | margin |
 |        +---------------------------+        |
 |        |                           |        |
 |        |          footer           |        |
 |        |                           |        |
 +---------------------------------------------+
 
 var t1 = {
     "divid" : "page",
     "rows" : [
         [
             [ "td_header", [ "header" ], [ "colSpan", 3 ] ]
         ],
         [
             [ "td_left_margin",  [ "left_margin"  ], [ "rowSpan", 2 ] ],
             [ "td_body",         [ "body"         ]                   ],
             [ "td_right_margin", [ "right_margin" ], [ "rowSpan", 2 ] ]
         ],
         [ [ "td_footer", [ "footer" ] ] ]
     ]
 };

=head2 ul_table( specs )

    - change a <ul><li><li>...</ul> tag into a table tag where each
      <li> becomes a table cell
    - the grid spec lets you arrange the cells into columns.
    - the attributes of the <ul> tag become those of the <table> tag
    - the attributes of each <li> tag become those of the <td> tag
    - if bullets, the id and class attributes are given to the bullet
      cells with the suffix '-bullet'
    - rows are not given any attributes

'specs' is a JSON object:

 {ulid}: id of the ul tag to replace with a new table (table gets this id)
 {grid}: the 'grid' value: how many columns in the new table
     - 0, "", or null: 1 column
     - otherwise: that number of columns
 {orien}: the 'orientation' value: horizontal or vertical
     - "", null, 'h' or 'horizontal': orient the cells horizontally in the grid, e.g.,
       a b c
       d e f
       g h i
     - 'v' or 'vertical': orient the cells vertically in the grid, e.g.,
       a d g
       b e h
       c f i
 {usebull}: index of child element to use in a bullet cell
         (in addition to the above bullet cell, if any)
     - "", or null: no additional bullet cell
     - otherwise: index of bullet element
 {bullet}: the 'bullet' value:  how (or whether) to display "bullet cells"
     - "", or null: no bullet cells
     - otherwise: character(s) to use for bullet (may be img tag)
 {prefix}: id prefix for cells and bullet cells
         note: if an <li> tag already has an id, it will be used as-is alone
         for the cell and suffixed with '-bullet' for the bullet cells;
         if not, the id prefix suffixed with an sequence number will be used
         for the cell, and that will be suffexed with '-bullet' for bullet cells;
         e.g.,
             <li id="abc"> => <td id="abc-bullet">&bull;</td><td id="abc">...
             <li>          => <td id="id1-bullet">&bull;</td><td id="id1">...
     - "", or null: no additional ids added to cells
     - otherwise: prefix used as described above

 Examples:
     var ul1 = { "ulid" : "ul1" };     // use defaults for everything else
     var ul2 = { "ulid" : "ul2", "grid" : 3 };  // 3 columns
     var ul1 = {
         "ulid"   : "ul1",
         "grid"   : 2,
         "orien"  : "vertical",
         "bullet" : "&bull;",
         "previx" : "id"
     };

=head2 ol_table( specs )

    - change a <ol><li><li>...</ol> tag into a table tag where each
      <li> becomes a table cell
    - the grid spec lets you arrange the cells into columns.
    - the attributes of the <ol> tag become those of the <table> tag
    - the attributes of each <li> tag become those of the <td> tag
    - if bullets, the id and class attributes are given to the bullet
      cells with the suffix '-bullet'
    - rows are not given any attributes

'specs' is a JSON object:

 {olid}: id of the ol tag to replace with a new table (table gets this id)
 {grid}: the 'grid' value: how many columns in the new table
     - 0, "", or null: 1 column
     - otherwise: that number of columns
 {orien}: the 'orientation' value: horizontal or vertical
     - "", null, 'h' or 'horizontal': orient the cells horizontally in the grid, e.g.,
       a b c
       d e f
       g h i
     - 'v' or 'vertical': orient the cells vertically in the grid, e.g.,
       a d g
       b e h
       c f i
 {usebull}: index of child element to use in a bullet cell
         (in addition to the above bullet cell, if any)
     - "", or null: no additional bullet cell
     - otherwise: index of bullet element
 {bullet}: the 'bullet' value:  how (or whether) to display "bullet cells"
     - "", or null: no bullet cells
     - otherwise: character(s) to use for bullet (may be img tag)
 {number}: the 'number' value:  how (or whether) to display "number cells"
     - "", or null: no number cells
     - otherwise: type of numbering to use for number
 {prefix}: id prefix for cells and bullet cells
         note: if an <li> tag already has an id, it will be used as-is alone
         for the cell and suffixed with '-bullet' for the bullet cells;
         if not, the id prefix suffixed with an sequence number will be used
         for the cell, and that will be suffexed with '-bullet' for bullet cells;
         e.g.,
             <li id="abc"> => <td id="abc-bullet">&bull;</td><td id="abc">...
             <li>          => <td id="id1-bullet">&bull;</td><td id="id1">...
     - "", or null: no additional ids added to cells
     - otherwise: prefix used as described above

 Examples:
     var ol1 = { "olid" : "ol1" };     // use defaults for everything else
     var ol2 = { "olid" : "ol2", "grid" : 3 };  // 3 columns
     var ol1 = {
         "olid"   : "ol1",
         "grid"   : 2,
         "orien"  : "vertical",
         "bullet" : "&bull;",
         "prefix" : "id"
     };

=head2 dl_table( specs )

    - change a <dl><dt><dd>...</dl> tag into a table tag where each
      <dt> and <dd> become a table cells
    - the attributes of the <dl> tag become those of the <table> tag
    - the attributes of each <dt/dd> tag become those of the <td> tag
    - if bullets, the id and class attributes are given to the bullet
      cells with the suffix '-bullet'
    - similarly for usebull and number
    - rows are not given any attributes
    - (note, no grid or orientation available for dl tables)

'specs' is a JSON object:

 {dlid}: id of the dl tag to replace with a new table (table gets this id)
 {usebull}: index of child element to use in a bullet cell
         (in addition to the above bullet cell, if any)
     - "", or null: no additional bullet cell
     - otherwise: index of bullet element
 {bullet}: the 'bullet' value:  how (or whether) to display "bullet cells"
     - "", or null: no bullet cells
     - otherwise: character(s) to use for bullet (may be img tag)
 {number}: the 'number' value:  how (or whether) to display "number cells"
     - "", or null: no number cells
     - otherwise: type of numbering to use for number
 {prefix}: id prefix for cells and bullet cells
         note: if an <li> tag already has an id, it will be used as-is alone
         for the cell and suffixed with '-bullet' for the bullet cells;
         if not, the id prefix suffixed with an sequence number will be used
         for the cell, and that will be suffexed with '-bullet' for bullet cells;
         e.g.,
             <li id="abc"> => <td id="abc-bullet">&bull;</td><td id="abc">...
             <li>          => <td id="id1-bullet">&bull;</td><td id="id1">...
     - "", or null: no additional ids added to cells
     - otherwise: prefix used as described above

 Examples:
     var dl1 = { "dlid" : "dl1" };     // use defaults for everything else
     var dl1 = {
         "dlid"   : "dl1",
         "bullet" : "&bull;",
         "prefix" : "id"
     };

=head2 table_maker()

=cut


