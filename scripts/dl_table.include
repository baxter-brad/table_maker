//--------------------------------------------------------------------
// from dl_table.include

//--------------------------------------------------------------------
// dl_table( oSpecs );
//
// expects a table specs object with required attribute:
//     dlid: id of the <dl> tag to make into a table
// and with optional attibutes:
//     number ... type of numbering to use (default is no numbering) 
//         value: 'arabic', 'upper-roman', 'upper-alpha', 'lower-roman', 'lower-alpha'
//     bullet ... character(s) to use as a bullet (creates a bullet cell)
//         value: any displayable characters, including entities, e.g., '&bull;'
//     usebull ... index of <dt>'s child element to use as a bullet (creates a cell)
//         value: integer >= 0
//     prefix ... id prefix to assign to cells; ignored if <dt> or <dd> has an id already
//         value: any characters acceptable as an html id attribute

function dl_table( oSpecs, isBuggyIE ) {

    var sID      = oSpecs.dlid;
    var sBullet  = oSpecs.bullet;
    var iUseBull = oSpecs.usebull;
    var sPrefix  = oSpecs.prefix;
    var sNumber  = oSpecs.number; if( !sNumber ) sNumber = 'arabic';
    var fNum     = numberAs[sNumber];
    var iDelta   = 0;

    /*
        aRow:    array of row elements (initially just one) to add cells (and rows) to
        aDdts:   array of dts and dds (dl children)
        iChild:  index into aDdts array (should be a dt)
        aDds:    array of indexes into aDdts array (should be dd's)
        iNumber: use this to number the (dt) rows
    */
    var makeCells = function ( aRow, aDdts, iChild, aDds, iNumber ) {
        var eRow     = aRow[ 0 ];
        var iDdCount = aDds.length;
        var eCell = document.createElement( "TD" );
        if( iDdCount > 1 ) mySetAttribute( eCell, "rowspan", iDdCount, isBuggyIE );
        var sCellID;
        var sClass;
        var iValue;
        var aAttributes = aDdts[ iChild ].attributes;
        if( aAttributes ) {
            for( var iAttr = 0; iAttr < aAttributes.length; iAttr++ ) {
                var sName  = aAttributes[ iAttr ].name;
                var sValue = aAttributes[ iAttr ].value;
                if( valCheck( sValue, isBuggyIE ) )
                    mySetAttribute( eCell, sName, sValue, isBuggyIE );
                if(      sName == "id"    ) sCellID =  sValue;
                else if( sName == "class" ) sClass  =  sValue;
                else if( sName == "value" ) iValue  = +sValue;
            }
        }
        if( !sCellID && sPrefix ) {
            sCellID = sPrefix+(iNumber);
            mySetAttribute( eCell, "id", sCellID, isBuggyIE );
        }
        if( typeof( iUseBull ) == 'number' ) {
            var eUseBulletCell = document.createElement( "TD" );
            if( iDdCount > 1 ) mySetAttribute( eUseBulletCell, "rowspan", iDdCount, isBuggyIE );
            eUseBulletCell.appendChild( aDdts[ iChild ].childNodes[ iUseBull ] );
            if( sCellID ) mySetAttribute( eUseBulletCell, "id",    sCellID + "-usebull", isBuggyIE );
            if( sClass  ) mySetAttribute( eUseBulletCell, "class", sClass  + "-usebull", isBuggyIE );
            eRow.appendChild( eUseBulletCell );
        }
        if( sBullet ) {
            var eBulletCell = document.createElement( "TD" );
            if( iDdCount > 1 ) mySetAttribute( eBulletCell, "rowspan", iDdCount, isBuggyIE );
            eBulletCell.innerHTML = sBullet;
            if( sCellID ) mySetAttribute( eBulletCell, "id",    sCellID + "-bullet", isBuggyIE );
            if( sClass  ) mySetAttribute( eBulletCell, "class", sClass  + "-bullet", isBuggyIE );
            eRow.appendChild( eBulletCell );
        }
        if( fNum ) {
            if( iValue && typeof( iValue ) == "number" ) iDelta = iValue - iNumber; 
            var eNumberCell = document.createElement( "TD" );
            if( iDdCount > 1 ) mySetAttribute( eNumberCell, "rowspan", iDdCount, isBuggyIE );
            eNumberCell.innerHTML = fNum( iNumber + iDelta )+".";
            if( sCellID ) mySetAttribute( eNumberCell, "id",    sCellID + "-number", isBuggyIE );
            if( sClass  ) mySetAttribute( eNumberCell, "class", sClass  + "-number", isBuggyIE );
            eRow.appendChild( eNumberCell );
        }
        var iLen = aDdts[ iChild ].childNodes.length;
        for( var iDdtChild = 0; iDdtChild < iLen; iDdtChild++ ) {
            eCell.appendChild( aDdts[ iChild ].childNodes[ 0 ] ); // nodes are shifted off
        }
        eRow.appendChild( eCell );
        if( iDdCount ) {

            // first dd goes on current row
            var eCell = document.createElement( "TD" );
            var sCellID;
            var sClass;
            var iValue;
            var iDd = 0;
            var iChild = aDds[ iDd ];
            var aAttributes = aDdts[ iChild ].attributes;
            if( aAttributes ) {
                for( var iAttr = 0; iAttr < aAttributes.length; iAttr++ ) {
                    var sName  = aAttributes[ iAttr ].name;
                    var sValue = aAttributes[ iAttr ].value;
                    if( valCheck( sValue, isBuggyIE ) )
                        mySetAttribute( eCell, sName, sValue, isBuggyIE );
                    if(      sName == "id"    ) sCellID =  sValue;
                    else if( sName == "class" ) sClass  =  sValue;
                    else if( sName == "value" ) iValue  = +sValue;
                }
            }
            if( !sCellID && sPrefix ) {
                sCellID = sPrefix+iNumber+"-"+( iDd + 1 );
                mySetAttribute( eCell, "id", sCellID, isBuggyIE );
            }
            var iLen = aDdts[ iChild ].childNodes.length;
            for( var iDdtChild = 0; iDdtChild < iLen; iDdtChild++ ) {
                eCell.appendChild( aDdts[ iChild ].childNodes[ 0 ] ); // nodes are shifted off
            }
            eRow.appendChild( eCell );

            // next dd's go on new rows
            for( var iDd = 1; iDd < iDdCount; iDd++ ) {
                var eCell = document.createElement( "TD" );
                aRows[ iDd ] = document.createElement( "TR" );
                mySetAttribute( aRows[ iDd ], "valign", "top", isBuggyIE );
                var sCellID;
                var sClass;
                var iValue;
                var iChild = aDds[ iDd ];
                var aAttributes = aDdts[ iChild ].attributes;
                if( aAttributes ) {
                    for( var iAttr = 0; iAttr < aAttributes.length; iAttr++ ) {
                        var sName  = aAttributes[ iAttr ].name;
                        var sValue = aAttributes[ iAttr ].value;
                        if( valCheck( sValue, isBuggyIE ) )
                            mySetAttribute( eCell, sName, sValue, isBuggyIE );
                        if(      sName == "id"    ) sCellID =  sValue;
                        else if( sName == "class" ) sClass  =  sValue;
                        else if( sName == "value" ) iValue  = +sValue;
                    }
                }
                if( !sCellID && sPrefix ) {
                    sCellID = sPrefix+iNumber+"-"+( iDd + 1 );
                    mySetAttribute( eCell, "id", sCellID, isBuggyIE );
                }
                var iLen = aDdts[ iChild ].childNodes.length;
                for( var iDdtChild = 0; iDdtChild < iLen; iDdtChild++ ) {
                    eCell.appendChild( aDdts[ iChild ].childNodes[ 0 ] ); // nodes are shifted off
                }
                aRows[ iDd ].appendChild( eCell );
            }
        }
    };

    // table
    var eTable = document.createElement( "TABLE" );

    // tbody
    var eTBody = document.createElement( "TBODY" );
    eTable.appendChild( eTBody);

    // <dl> tag to convert to rows & cells
    var eDl = document.getElementById( sID );
    if( eDl ) {

        var aDdts = eDl.childNodes;

        /*
            each pair of elements in this array represents one <dt>
            the first value is the index of the dt
            the second value is an array of the indexes of the dd's
            (the dots represent text nodes--i.e., white space)
            e.g., <dl>..<dt>..<dt>..<dd>..<dd>..<dt>..<dd>..</dl> =>
                  [   0  1  2  3  4  5  6  7  8  9  10 11 12   ]
                  [ 1, [], 3, [5,7], 9, [11] ]
        */ 
        var aDts = new Array;
        var iDts = -1;  // because we want the first ++iDts to be 0
        var iDds = -1;
        for( var iDdts = 0; iDdts < aDdts.length; iDdts++ ) {
            var sTag = aDdts[ iDdts ].tagName
            if( !sTag ) continue;  // skip text nodes, i.e., white space
            if(      sTag == "DT" ) {
                aDts[ ++iDts ] = iDdts;
                aDts[ ++iDts ] = new Array;
                iDds = -1;
            }
            else if( sTag == "DD" ) {
                aDts[ iDts ][ ++iDds ] = iDdts;
            }
        }

        /*
            this is an array of rows for multiple <dd>'s
        */
        var aRows = new Array;
        aRows[ 0 ] = document.createElement( "TR" );
        mySetAttribute( aRows[ 0 ], "valign", "top", isBuggyIE );

        for( var iDts = 0; iDts < aDts.length; ) {
            var iChild  = aDts[ iDts++ ];
            var aDds    = aDts[ iDts++ ];
            var iNumber = iDts/2;
            makeCells( aRows, aDdts, iChild, aDds, iNumber );
            for( var iRow = 0; iRow < aRows.length; iRow++ ) {
                eTBody.appendChild( aRows[ iRow ] );
            }
            aRows = new Array;
            aRows[ 0 ] = document.createElement( "TR" );
            mySetAttribute( aRows[ 0 ], "valign", "top", isBuggyIE );
        } 

        // replace dl with table and add attributes to the table
        var aAttributes = eDl.attributes;
        if( aAttributes ) {
            for( var iAttr = 0; iAttr < aAttributes.length; iAttr++ ) {
                var sName  = aAttributes[ iAttr ].name;
                var sValue = aAttributes[ iAttr ].value;
                if( valCheck( sValue, isBuggyIE ) )
                    mySetAttribute( eTable, sName, sValue, isBuggyIE );
            }
        }
        eDl.parentNode.replaceChild( eTable, eDl );
    }
}

