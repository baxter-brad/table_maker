#!/usr/local/bin/perl -s
use strict;
use warnings;

#---------------------------------------------------------------------
# modules

use lib "/galileo/dev/cgi-bin/perlib";
use Config::Ini::Expanded;
sub makebak;
sub readfile;
sub writefile;
sub appendfile;
sub message;

#---------------------------------------------------------------------
# parms

our ( $bak, $nl, $warn, $v, $f, $outdir, $h, $help );

my $Warning = defined $warn  ? $warn   : 1;  # on by default
my $Newline = defined $nl    ? $nl     : 1;  # on by default
my $Makebak = defined $bak   ? $bak    : 1;  # on by default
my $Verbose = defined $v     ? $v      : 1;  # on by default
my @Files   = $f? split /[, ]/, $f: ();

if( $h or $help ) {
    print <<_end_;
usage: file_compile [-bak=0] [-nl=0] [-warn=0] [-v=1] [-outdir=outdir]
where: -bak=0  will turn off backups
       -nl=0   will turn off newlines between includes
       -warn=0 will turn off edit warnings at the top of compiled files
       -v=0    will turn off running messages
_end_
    exit;
}

#---------------------------------------------------------------------
# main

message "\tFile Compile ...\n";
my $ini = Config::Ini::Expanded->new("$0.ini");

my $include_dir = $ini->get( general => 'include_dir' );
my $js_dir      = $ini->get( general => 'js_dir'      );

my @files = @Files? @Files: $ini->get_sections;

for my $file ( @files ) {
    next unless $file =~ /\.js$/;
    my $outfile = "$js_dir/$file";
    message "\nFile: $file => $outfile\n";
    my @includes = $ini->get( $file => "include" );
    next unless @includes;
    for my $include_file ( $includes[ 0 ] ) {
        if( $include_file =~ /\.include$/ ) {
            $include_file = "$include_dir/$include_file"; }
        else {
            $include_file = "$js_dir/$include_file"; }
        message "\tIncludes: $include_file\n";
        my $contents = readfile $include_file;
        writefile( $outfile, \$contents );  # with backup, if any
    }
    for my $include_file ( @includes[ 1 .. $#includes ] ) {
        if( $include_file =~ /\.include$/ ) {
            $include_file = "$include_dir/$include_file"; }
        else {
            $include_file = "$js_dir/$include_file"; }
        message "\tIncludes: $include_file\n";
        my $contents = readfile $include_file;
        appendfile( $outfile, \$contents, 0 );  # no backup
    }
}

#---------------------------------------------------------------------
# subroutines

#---------------------------------------------------------------------
sub readfile {
    my( $file ) = @_;
    open my $fh, '<', $file or die "Can't open $file: $!";
    return do { local $/; <$fh> };
}

#---------------------------------------------------------------------
sub writefile {
    my( $file, $contents, $bak ) = @_;
    $bak = $Makebak unless defined $bak;
    makebak $file if $bak and -e $file;
    open my $fh, '>', $file or die "Can't open $file: $!";
    print {$fh} <<_end_ if $Warning;

    // =============== WARNING! WARNING! WARNING! ===============
    // DO NOT edit this file.  Instead, edit the include files in
    // file_compile.ini and then run file_compile to recompile.
    // =============== WARNING! WARNING! WARNING! ===============

_end_
    print {$fh} $$contents;
}

#---------------------------------------------------------------------
sub appendfile {
    my( $file, $contents, $bak ) = @_;
    $bak = $Makebak unless defined $bak;
    # makebak $file if $bak and -e $file;  # ???
    open my $fh, '>>', $file or die "Can't open $file: $!";
    print {$fh} "\n" if $Newline;
    print {$fh} $$contents;
}

#---------------------------------------------------------------------
sub message {
    print @_ if $Verbose;
}

#---------------------------------------------------------------------
sub makebak {

    use Fcntl qw(:DEFAULT :flock);  # for O_WRONLY O_EXCL O_CREAT
    use POSIX qw(:errno_h);         # for EEXIST
    use File::Copy;

    my $filename = shift;
    my $bakfile  = shift||$filename;
    die "Invalid argument: filename missing" unless defined $filename;
    die "File, $filename, does not exist"    unless -e      $filename;
    die "Bad bakfile?"                       if $bakfile =~ /%s/;

    local *BAK;

    my $fmt = shift||'%s.bak.yyyymmdd.%03d';
    die "Invalid format ($fmt)" unless $fmt =~ /%s/;

    my $yyyymmdd = sprintf( "%04d%02d%02d",
        sub { ( $_[5] + 1900, $_[4] + 1, $_[3] ) }->( localtime ) );

    $fmt =~ s/%s/$bakfile/; $fmt =~ s/yyyymmdd/$yyyymmdd/;

    ### backup file can't already exist, so skip existing ones
    for( my $serial = 0;; ) {
        my $file = sprintf $fmt, ++$serial;
        last if sysopen( BAK, $file, O_WRONLY|O_EXCL|O_CREAT );
        die $! unless $! == EEXIST;              ### if other error
        die "Infinite loop" if $serial > 10_000; ### last resort
    }
    return ( copy $filename, *BAK );
}

